------------------------------------------Prueba psicologica--------------------------------------------------------------------
-- FUNCTION: public.get_competence_response_summary(integer, integer)

-- DROP FUNCTION IF EXISTS public.get_competence_response_summary(integer, integer);

CREATE OR REPLACE FUNCTION public.get_competence_response_summary(
	evaluationid integer,
	competence_id integer)
    RETURNS TABLE(competenceid integer, competencename text, responseanswersum integer) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
BEGIN
    RETURN QUERY
    SELECT
        comp.comp_id as "competenceId",
        comp.comp_name::TEXT as "competenceName",  -- Conversión explícita a TEXT
        SUM(CAST(resp.resp_answer AS INTEGER))::INTEGER AS "responseAnswerSum"
    FROM
        transactional.response_evaluation reev
    INNER JOIN parameterization.ask ask ON reev.ask_id = ask.ask_id
    INNER JOIN parameterization.response resp ON reev.resp_id = resp.resp_id
    INNER JOIN parameterization.competence comp ON ask.comp_id = comp.comp_id
    WHERE 
        reev.eval_id = evaluationid
		and comp.comp_id = competence_id
    GROUP BY
        comp.comp_id,
        comp.comp_name;
END;
$BODY$;

ALTER FUNCTION public.get_competence_response_summary(integer, integer)
    OWNER TO postgres;

------------------------------------------Prueba psicologica--------------------------------------------------------------------

-- FUNCTION: public.get_max_score_competence(integer)

-- DROP FUNCTION IF EXISTS public.get_max_score_competence(integer);

CREATE OR REPLACE FUNCTION public.get_max_score_competence(
	comp_id_param integer)
    RETURNS TABLE(competenceid integer, competencename text, responsevaluemax text, competencevaluemax integer) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
BEGIN
    RETURN QUERY
    SELECT 
        DISTINCT
        ask.comp_id AS "competenceId",
        (SELECT comp.comp_name::text 
         FROM parameterization.competence comp
         WHERE comp.comp_id = comp_id_param) AS "competenceName",
        MAX(resp.resp_answer)::text AS "responseValueMax",
        CAST(
    MAX(resp.resp_answer::INTEGER) * (select COUNT(ask1.ask_id::INTEGER) from parameterization.ask ask1 where ask1.comp_id = comp_id_param) AS INTEGER) AS "competenceValueMax"
    FROM 
        parameterization.ask ask
        INNER JOIN parameterization.response resp ON ask.ask_id = resp.ask_id
    WHERE 
        ask.comp_id = comp_id_param
    GROUP BY "competenceId", "competenceName";
END;
$BODY$;

ALTER FUNCTION public.get_max_score_competence(integer)
    OWNER TO postgres;

COMMENT ON FUNCTION public.get_max_score_competence(integer)
    IS 'esta función muestra el valor maximo por competencia ';

-------------------------------------------Pruebas personalidad-----------------------------------------------------------------------
-- FUNCTION: public.get_calcular_puntuacion(integer)

-- DROP FUNCTION IF EXISTS public.get_calcular_puntuacion(integer);

CREATE OR REPLACE FUNCTION public.get_calcular_puntuacion(
	eval_id_param integer)
    RETURNS TABLE(competenceid integer, puntuacionaspirante integer, numeropreguntas integer, porcentaje integer)
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
    BEGIN
        RETURN QUERY
        SELECT
		comp_id as "competenceId",
	    SUM(CASE WHEN resp_answer IN ('A Veces', 'Siempre') THEN count_resp ELSE 0 END)::INTEGER AS "PuntuacionAspirante",
	    SUM(count_resp)::INTEGER AS "NumeroPreguntas",
	    ROUND(
	        (SUM(CASE WHEN resp_answer IN ('A Veces', 'Siempre') THEN count_resp ELSE 0 END) * 100.0) /
	        SUM(count_resp))::INTEGER AS porcentaje
    FROM (
        SELECT
			comp.comp_id,
            resp.resp_answer,
            COUNT(resp.resp_answer) AS count_resp
        FROM
            parameterization.type_test tyte
            INNER JOIN parameterization.competence comp ON tyte.tyte_id = comp.tyte_id
            INNER JOIN parameterization.ask ask ON comp.comp_id = ask.comp_id
            INNER JOIN transactional.response_evaluation reev ON ask.ask_id = reev.ask_id
            INNER JOIN parameterization.evaluation eval ON reev.eval_id = eval.eval_id
            INNER JOIN parameterization.response resp ON reev.resp_id = resp.resp_id
        WHERE
            eval.eval_id = eval_id_param
			and tyte.tyte_id = 3
        GROUP BY comp.comp_id,resp.resp_answer
    ) AS subconsulta
	GROUP BY comp_id;
    END;

$BODY$;

ALTER FUNCTION public.get_calcular_puntuacion(integer)
    OWNER TO postgres;